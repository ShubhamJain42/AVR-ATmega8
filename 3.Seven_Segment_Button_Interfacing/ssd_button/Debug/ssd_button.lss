
ssd_button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000ce  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000060b  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000054d  00000000  00000000  000007e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000264  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000f94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031a  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000127  00000000  00000000  000012e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001409  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee ec       	ldi	r30, 0xCE	; 206
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	3f c0       	rjmp	.+126    	; 0xca <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:

#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  4e:	cf 93       	push	r28
  50:	df 93       	push	r29
  52:	cd b7       	in	r28, 0x3d	; 61
  54:	de b7       	in	r29, 0x3e	; 62
  56:	2a 97       	sbiw	r28, 0x0a	; 10
  58:	0f b6       	in	r0, 0x3f	; 63
  5a:	f8 94       	cli
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	0f be       	out	0x3f, r0	; 63
  60:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0xFF;
  62:	8f ef       	ldi	r24, 0xFF	; 255
  64:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
  66:	12 ba       	out	0x12, r1	; 18
	char ssd_val[10] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6f};
  68:	8a e0       	ldi	r24, 0x0A	; 10
  6a:	e0 e6       	ldi	r30, 0x60	; 96
  6c:	f0 e0       	ldi	r31, 0x00	; 0
  6e:	de 01       	movw	r26, r28
  70:	11 96       	adiw	r26, 0x01	; 1
  72:	01 90       	ld	r0, Z+
  74:	0d 92       	st	X+, r0
  76:	8a 95       	dec	r24
  78:	e1 f7       	brne	.-8      	; 0x72 <main+0x24>
	DDRB = 0x00;
  7a:	17 ba       	out	0x17, r1	; 23
    /* Replace with your application code */
    int i = 0;
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	02 c0       	rjmp	.+4      	; 0x86 <main+0x38>
	while (1) 
    {	
		if((i & 10) == 10)		// or use i%10
			i=0;
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	90 e0       	ldi	r25, 0x00	; 0
		if((PINB & 0x04)==0x00){	// or use while((PINB & 0x04)==0x00); i.e. infinite loop till button is pressed
  86:	b2 99       	sbic	0x16, 2	; 22
  88:	0b c0       	rjmp	.+22     	; 0xa0 <main+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	2f e9       	ldi	r18, 0x9F	; 159
  8c:	36 e8       	ldi	r19, 0x86	; 134
  8e:	41 e0       	ldi	r20, 0x01	; 1
  90:	21 50       	subi	r18, 0x01	; 1
  92:	30 40       	sbci	r19, 0x00	; 0
  94:	40 40       	sbci	r20, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0x42>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x4c>
  9a:	00 00       	nop
		_delay_ms(500);
			if((PINB & 0x04)==0x04)
  9c:	b2 99       	sbic	0x16, 2	; 22
				i++;
  9e:	01 96       	adiw	r24, 0x01	; 1
		}
		PORTD = ssd_val[i];
  a0:	e1 e0       	ldi	r30, 0x01	; 1
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	ec 0f       	add	r30, r28
  a6:	fd 1f       	adc	r31, r29
  a8:	e8 0f       	add	r30, r24
  aa:	f9 1f       	adc	r31, r25
  ac:	20 81       	ld	r18, Z
  ae:	22 bb       	out	0x12, r18	; 18
  b0:	e3 ec       	ldi	r30, 0xC3	; 195
  b2:	f9 e0       	ldi	r31, 0x09	; 9
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x66>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x6c>
  ba:	00 00       	nop
	DDRB = 0x00;
    /* Replace with your application code */
    int i = 0;
	while (1) 
    {	
		if((i & 10) == 10)		// or use i%10
  bc:	9c 01       	movw	r18, r24
  be:	2a 70       	andi	r18, 0x0A	; 10
  c0:	33 27       	eor	r19, r19
  c2:	2a 30       	cpi	r18, 0x0A	; 10
  c4:	31 05       	cpc	r19, r1
  c6:	f9 f6       	brne	.-66     	; 0x86 <main+0x38>
  c8:	dc cf       	rjmp	.-72     	; 0x82 <main+0x34>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
