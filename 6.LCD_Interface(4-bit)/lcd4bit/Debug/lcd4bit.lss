
lcd4bit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000194  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000816  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e7  00000000  00000000  00000aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039c  00000000  00000000  00001091  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001430  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000321  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000283  00000000  00000000  000017d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	56 d0       	rcall	.+172    	; 0xe0 <main>
  34:	ad c0       	rjmp	.+346    	; 0x190 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <LCD_cmnd>:

void LCD_string(unsigned char *str){
	int i;
	for(i=0;i<strlen(str);i++)
		LCD_data(str[i]);
}
  38:	92 b3       	in	r25, 0x12	; 18
  3a:	9f 70       	andi	r25, 0x0F	; 15
  3c:	92 bb       	out	0x12, r25	; 18
  3e:	92 b3       	in	r25, 0x12	; 18
  40:	28 2f       	mov	r18, r24
  42:	20 7f       	andi	r18, 0xF0	; 240
  44:	92 2b       	or	r25, r18
  46:	92 bb       	out	0x12, r25	; 18
  48:	a8 98       	cbi	0x15, 0	; 21
  4a:	a9 9a       	sbi	0x15, 1	; 21
  4c:	e3 ec       	ldi	r30, 0xC3	; 195
  4e:	f9 e0       	ldi	r31, 0x09	; 9
  50:	31 97       	sbiw	r30, 0x01	; 1
  52:	f1 f7       	brne	.-4      	; 0x50 <__SREG__+0x11>
  54:	00 c0       	rjmp	.+0      	; 0x56 <__SREG__+0x17>
  56:	00 00       	nop
  58:	a9 98       	cbi	0x15, 1	; 21
  5a:	92 b3       	in	r25, 0x12	; 18
  5c:	9f 70       	andi	r25, 0x0F	; 15
  5e:	92 bb       	out	0x12, r25	; 18
  60:	22 b3       	in	r18, 0x12	; 18
  62:	f0 e1       	ldi	r31, 0x10	; 16
  64:	8f 9f       	mul	r24, r31
  66:	c0 01       	movw	r24, r0
  68:	11 24       	eor	r1, r1
  6a:	82 2b       	or	r24, r18
  6c:	82 bb       	out	0x12, r24	; 18
  6e:	a9 9a       	sbi	0x15, 1	; 21
  70:	83 ec       	ldi	r24, 0xC3	; 195
  72:	99 e0       	ldi	r25, 0x09	; 9
  74:	01 97       	sbiw	r24, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <__SREG__+0x35>
  78:	00 c0       	rjmp	.+0      	; 0x7a <__SREG__+0x3b>
  7a:	00 00       	nop
  7c:	a9 98       	cbi	0x15, 1	; 21
  7e:	08 95       	ret

00000080 <LCD_data>:
  80:	92 b3       	in	r25, 0x12	; 18
  82:	9f 70       	andi	r25, 0x0F	; 15
  84:	92 bb       	out	0x12, r25	; 18
  86:	92 b3       	in	r25, 0x12	; 18
  88:	28 2f       	mov	r18, r24
  8a:	20 7f       	andi	r18, 0xF0	; 240
  8c:	92 2b       	or	r25, r18
  8e:	92 bb       	out	0x12, r25	; 18
  90:	a8 9a       	sbi	0x15, 0	; 21
  92:	a9 9a       	sbi	0x15, 1	; 21
  94:	e3 ec       	ldi	r30, 0xC3	; 195
  96:	f9 e0       	ldi	r31, 0x09	; 9
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <LCD_data+0x18>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <LCD_data+0x1e>
  9e:	00 00       	nop
  a0:	a9 98       	cbi	0x15, 1	; 21
  a2:	92 b3       	in	r25, 0x12	; 18
  a4:	9f 70       	andi	r25, 0x0F	; 15
  a6:	92 bb       	out	0x12, r25	; 18
  a8:	22 b3       	in	r18, 0x12	; 18
  aa:	f0 e1       	ldi	r31, 0x10	; 16
  ac:	8f 9f       	mul	r24, r31
  ae:	c0 01       	movw	r24, r0
  b0:	11 24       	eor	r1, r1
  b2:	82 2b       	or	r24, r18
  b4:	82 bb       	out	0x12, r24	; 18
  b6:	a8 9a       	sbi	0x15, 0	; 21
  b8:	a9 9a       	sbi	0x15, 1	; 21
  ba:	83 ec       	ldi	r24, 0xC3	; 195
  bc:	99 e0       	ldi	r25, 0x09	; 9
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <LCD_data+0x3e>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <LCD_data+0x44>
  c4:	00 00       	nop
  c6:	a9 98       	cbi	0x15, 1	; 21
  c8:	08 95       	ret

000000ca <LCD_init>:

void LCD_init(){
	LCD_cmnd(0x02);			//or use 0x32 : hint: lcd by default works in 8-bit mode
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	b5 df       	rcall	.-150    	; 0x38 <LCD_cmnd>
	LCD_cmnd(0x28);			//Function Set: 8-bit, 2 Line, 5×7 Dots
  ce:	88 e2       	ldi	r24, 0x28	; 40
  d0:	b3 df       	rcall	.-154    	; 0x38 <LCD_cmnd>
	LCD_cmnd(0x06);			//Entry Mode: increment direction
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	b1 df       	rcall	.-158    	; 0x38 <LCD_cmnd>
	LCD_cmnd(0x0C);			//Display on Cursor on(not blinking)
  d6:	8c e0       	ldi	r24, 0x0C	; 12
  d8:	af df       	rcall	.-162    	; 0x38 <LCD_cmnd>
	LCD_cmnd(0x01);			//Clear Display (also clear DDRAM content)
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	ad df       	rcall	.-166    	; 0x38 <LCD_cmnd>
  de:	08 95       	ret

000000e0 <main>:
}

int main(void)
{
	DDRD = 0xFF;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x03;
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	84 bb       	out	0x14, r24	; 20
	LCD_init();
  e8:	f0 df       	rcall	.-32     	; 0xca <LCD_init>
    while (1) 
    {
		//Using LCD_string function
		LCD_cmnd(0x80);
		for (i=0;i<100;i++){
			LCD_data(0x30+i/10);
  ea:	0f 2e       	mov	r0, r31
  ec:	fa e0       	ldi	r31, 0x0A	; 10
  ee:	ef 2e       	mov	r14, r31
  f0:	f1 2c       	mov	r15, r1
  f2:	f0 2d       	mov	r31, r0
    /* Replace with your application code */
	int i;
    while (1) 
    {
		//Using LCD_string function
		LCD_cmnd(0x80);
  f4:	80 e8       	ldi	r24, 0x80	; 128
  f6:	a0 df       	rcall	.-192    	; 0x38 <LCD_cmnd>
		for (i=0;i<100;i++){
  f8:	c0 e0       	ldi	r28, 0x00	; 0
  fa:	d0 e0       	ldi	r29, 0x00	; 0
			LCD_data(0x30+i/10);
  fc:	ce 01       	movw	r24, r28
  fe:	b7 01       	movw	r22, r14
 100:	20 d0       	rcall	.+64     	; 0x142 <__divmodhi4>
 102:	18 2f       	mov	r17, r24
 104:	80 e3       	ldi	r24, 0x30	; 48
 106:	86 0f       	add	r24, r22
 108:	bb df       	rcall	.-138    	; 0x80 <LCD_data>
			LCD_data(0x30+i%10);	
 10a:	80 e3       	ldi	r24, 0x30	; 48
 10c:	81 0f       	add	r24, r17
 10e:	b8 df       	rcall	.-144    	; 0x80 <LCD_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	2f e3       	ldi	r18, 0x3F	; 63
 112:	8d e0       	ldi	r24, 0x0D	; 13
 114:	93 e0       	ldi	r25, 0x03	; 3
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x36>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x40>
 120:	00 00       	nop
			_delay_ms(1000);
			LCD_cmnd(0x01);
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	89 df       	rcall	.-238    	; 0x38 <LCD_cmnd>
	int i;
    while (1) 
    {
		//Using LCD_string function
		LCD_cmnd(0x80);
		for (i=0;i<100;i++){
 126:	21 96       	adiw	r28, 0x01	; 1
 128:	c4 36       	cpi	r28, 0x64	; 100
 12a:	d1 05       	cpc	r29, r1
 12c:	39 f7       	brne	.-50     	; 0xfc <main+0x1c>
 12e:	2f e3       	ldi	r18, 0x3F	; 63
 130:	8d e0       	ldi	r24, 0x0D	; 13
 132:	93 e0       	ldi	r25, 0x03	; 3
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x54>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x5e>
 13e:	00 00       	nop
 140:	d9 cf       	rjmp	.-78     	; 0xf4 <main+0x14>

00000142 <__divmodhi4>:
 142:	97 fb       	bst	r25, 7
 144:	07 2e       	mov	r0, r23
 146:	16 f4       	brtc	.+4      	; 0x14c <__divmodhi4+0xa>
 148:	00 94       	com	r0
 14a:	06 d0       	rcall	.+12     	; 0x158 <__divmodhi4_neg1>
 14c:	77 fd       	sbrc	r23, 7
 14e:	08 d0       	rcall	.+16     	; 0x160 <__divmodhi4_neg2>
 150:	0b d0       	rcall	.+22     	; 0x168 <__udivmodhi4>
 152:	07 fc       	sbrc	r0, 7
 154:	05 d0       	rcall	.+10     	; 0x160 <__divmodhi4_neg2>
 156:	3e f4       	brtc	.+14     	; 0x166 <__divmodhi4_exit>

00000158 <__divmodhi4_neg1>:
 158:	90 95       	com	r25
 15a:	81 95       	neg	r24
 15c:	9f 4f       	sbci	r25, 0xFF	; 255
 15e:	08 95       	ret

00000160 <__divmodhi4_neg2>:
 160:	70 95       	com	r23
 162:	61 95       	neg	r22
 164:	7f 4f       	sbci	r23, 0xFF	; 255

00000166 <__divmodhi4_exit>:
 166:	08 95       	ret

00000168 <__udivmodhi4>:
 168:	aa 1b       	sub	r26, r26
 16a:	bb 1b       	sub	r27, r27
 16c:	51 e1       	ldi	r21, 0x11	; 17
 16e:	07 c0       	rjmp	.+14     	; 0x17e <__udivmodhi4_ep>

00000170 <__udivmodhi4_loop>:
 170:	aa 1f       	adc	r26, r26
 172:	bb 1f       	adc	r27, r27
 174:	a6 17       	cp	r26, r22
 176:	b7 07       	cpc	r27, r23
 178:	10 f0       	brcs	.+4      	; 0x17e <__udivmodhi4_ep>
 17a:	a6 1b       	sub	r26, r22
 17c:	b7 0b       	sbc	r27, r23

0000017e <__udivmodhi4_ep>:
 17e:	88 1f       	adc	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	5a 95       	dec	r21
 184:	a9 f7       	brne	.-22     	; 0x170 <__udivmodhi4_loop>
 186:	80 95       	com	r24
 188:	90 95       	com	r25
 18a:	bc 01       	movw	r22, r24
 18c:	cd 01       	movw	r24, r26
 18e:	08 95       	ret

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
