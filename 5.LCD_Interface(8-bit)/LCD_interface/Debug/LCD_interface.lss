
LCD_interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000000fa  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000759  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c5  00000000  00000000  0000098d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000306  00000000  00000000  00000f52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001258  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032d  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001af  00000000  00000000  00001609  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea ef       	ldi	r30, 0xFA	; 250
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 37       	cpi	r26, 0x78	; 120
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	42 d0       	rcall	.+132    	; 0xce <main>
  4a:	55 c0       	rjmp	.+170    	; 0xf6 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <LCD_cmnd>:
#include <util/delay.h>
#define RS PC0
#define E PC1 

void LCD_cmnd(unsigned char cmd){
	PORTD = cmd;
  4e:	82 bb       	out	0x12, r24	; 18
	PORTC &= (~(1<<RS));	// to give PC = xxxxxxxRS = xxxxxxx0 (RS = 0 is command mode)
  50:	a8 98       	cbi	0x15, 0	; 21
	PORTC |= (1<<E);		// to give PC = xxxxxxEx  = xxxxxx1x (E  = 1 is rising edge)
  52:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  54:	83 ec       	ldi	r24, 0xC3	; 195
  56:	99 e0       	ldi	r25, 0x09	; 9
  58:	01 97       	sbiw	r24, 0x01	; 1
  5a:	f1 f7       	brne	.-4      	; 0x58 <LCD_cmnd+0xa>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <LCD_cmnd+0x10>
  5e:	00 00       	nop
	_delay_ms(10);
	PORTC &= (~(1<<E));		// to give PC = xxxxxxEx  = xxxxxx0x (E  = 0 is falling edge)
  60:	a9 98       	cbi	0x15, 1	; 21
  62:	08 95       	ret

00000064 <LCD_data>:
}

void LCD_data(unsigned char data){
	PORTD = data;
  64:	82 bb       	out	0x12, r24	; 18
	PORTC |= (1<<RS);		// to give PC = xxxxxxxRS = xxxxxxx1 (RS = 1 is command mode)
  66:	a8 9a       	sbi	0x15, 0	; 21
	PORTC |= (1<<E);		// to give PC = xxxxxxEx  = xxxxxx1x (E  = 1 is rising edge)
  68:	a9 9a       	sbi	0x15, 1	; 21
  6a:	83 ec       	ldi	r24, 0xC3	; 195
  6c:	99 e0       	ldi	r25, 0x09	; 9
  6e:	01 97       	sbiw	r24, 0x01	; 1
  70:	f1 f7       	brne	.-4      	; 0x6e <LCD_data+0xa>
  72:	00 c0       	rjmp	.+0      	; 0x74 <LCD_data+0x10>
  74:	00 00       	nop
	_delay_ms(10);
	PORTC &= (~(1<<E));		// to give PC = xxxxxxEx  = xxxxxx0x (E  = 0 is falling edge)
  76:	a9 98       	cbi	0x15, 1	; 21
  78:	08 95       	ret

0000007a <LCD_string>:
}

void LCD_string(unsigned char *str){
  7a:	ef 92       	push	r14
  7c:	ff 92       	push	r15
  7e:	0f 93       	push	r16
  80:	1f 93       	push	r17
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	8c 01       	movw	r16, r24
  88:	7c 01       	movw	r14, r24
	int i;
	for(i=0;i<strlen(str);i++)
  8a:	c0 e0       	ldi	r28, 0x00	; 0
  8c:	d0 e0       	ldi	r29, 0x00	; 0
  8e:	05 c0       	rjmp	.+10     	; 0x9a <LCD_string+0x20>
		LCD_data(str[i]);
  90:	f7 01       	movw	r30, r14
  92:	81 91       	ld	r24, Z+
  94:	7f 01       	movw	r14, r30
  96:	e6 df       	rcall	.-52     	; 0x64 <LCD_data>
	PORTC &= (~(1<<E));		// to give PC = xxxxxxEx  = xxxxxx0x (E  = 0 is falling edge)
}

void LCD_string(unsigned char *str){
	int i;
	for(i=0;i<strlen(str);i++)
  98:	21 96       	adiw	r28, 0x01	; 1
  9a:	f8 01       	movw	r30, r16
  9c:	01 90       	ld	r0, Z+
  9e:	00 20       	and	r0, r0
  a0:	e9 f7       	brne	.-6      	; 0x9c <LCD_string+0x22>
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	e0 1b       	sub	r30, r16
  a6:	f1 0b       	sbc	r31, r17
  a8:	ce 17       	cp	r28, r30
  aa:	df 07       	cpc	r29, r31
  ac:	88 f3       	brcs	.-30     	; 0x90 <LCD_string+0x16>
		LCD_data(str[i]);
}
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	1f 91       	pop	r17
  b4:	0f 91       	pop	r16
  b6:	ff 90       	pop	r15
  b8:	ef 90       	pop	r14
  ba:	08 95       	ret

000000bc <LCD_init>:

void LCD_init(){
	LCD_cmnd(0x38);			//Function Set: 8-bit, 2 Line, 5×7 Dots
  bc:	88 e3       	ldi	r24, 0x38	; 56
  be:	c7 df       	rcall	.-114    	; 0x4e <LCD_cmnd>
	LCD_cmnd(0x06);			//Entry Mode: increment direction
  c0:	86 e0       	ldi	r24, 0x06	; 6
  c2:	c5 df       	rcall	.-118    	; 0x4e <LCD_cmnd>
	LCD_cmnd(0x0F);			//Display on Cursor on(not blinking)
  c4:	8f e0       	ldi	r24, 0x0F	; 15
  c6:	c3 df       	rcall	.-122    	; 0x4e <LCD_cmnd>
	LCD_cmnd(0x01);			//Clear Display (also clear DDRAM content)
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	c1 df       	rcall	.-126    	; 0x4e <LCD_cmnd>
  cc:	08 95       	ret

000000ce <main>:
}

int main(void)
{
	DDRD = 0xFF;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x03;
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	84 bb       	out	0x14, r24	; 20
	LCD_init();
  d6:	f2 df       	rcall	.-28     	; 0xbc <LCD_init>
    /* Replace with your application code */
    //while (1) 
    {
		//Using LCD_string function
		LCD_cmnd(0x80);
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	b9 df       	rcall	.-142    	; 0x4e <LCD_cmnd>
		char str="Shubham Jain";
		LCD_string((str));
  dc:	80 e6       	ldi	r24, 0x60	; 96
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	99 27       	eor	r25, r25
  e2:	cb df       	rcall	.-106    	; 0x7a <LCD_string>
		
		LCD_cmnd(0xC0);
  e4:	80 ec       	ldi	r24, 0xC0	; 192
  e6:	b3 df       	rcall	.-154    	; 0x4e <LCD_cmnd>
		str = "IIT Patna";
		LCD_string(str);
  e8:	8d e6       	ldi	r24, 0x6D	; 109
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	99 27       	eor	r25, r25
  ee:	c5 df       	rcall	.-118    	; 0x7a <LCD_string>
		LCD_data('t');
		LCD_data('n');
		LCD_data('a');
		*/
    }
}
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	08 95       	ret

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
