
_2ssd_button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000014a  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000622  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000568  00000000  00000000  00000876  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000295  00000000  00000000  00000dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001074  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031c  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f1  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e4       	ldi	r30, 0x4A	; 74
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	7d c0       	rjmp	.+250    	; 0x146 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:

#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  4e:	cf 93       	push	r28
  50:	df 93       	push	r29
  52:	cd b7       	in	r28, 0x3d	; 61
  54:	de b7       	in	r29, 0x3e	; 62
  56:	2a 97       	sbiw	r28, 0x0a	; 10
  58:	0f b6       	in	r0, 0x3f	; 63
  5a:	f8 94       	cli
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	0f be       	out	0x3f, r0	; 63
  60:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
    while (1) 
    {
		DDRC = 0x03;
  62:	83 e0       	ldi	r24, 0x03	; 3
  64:	84 bb       	out	0x14, r24	; 20
	    DDRD = 0xFF;
  66:	8f ef       	ldi	r24, 0xFF	; 255
  68:	81 bb       	out	0x11, r24	; 17
	    PORTD = 0x00;
  6a:	12 ba       	out	0x12, r1	; 18
	    char ssd_val[10] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6f};
  6c:	8a e0       	ldi	r24, 0x0A	; 10
  6e:	e0 e6       	ldi	r30, 0x60	; 96
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	de 01       	movw	r26, r28
  74:	11 96       	adiw	r26, 0x01	; 1
  76:	01 90       	ld	r0, Z+
  78:	0d 92       	st	X+, r0
  7a:	8a 95       	dec	r24
  7c:	e1 f7       	brne	.-8      	; 0x76 <main+0x28>
	    DDRB = 0x00;
  7e:	17 ba       	out	0x17, r1	; 23
	    /* Replace with your application code */
	    int i = 0,j=0;
  80:	00 e0       	ldi	r16, 0x00	; 0
  82:	10 e0       	ldi	r17, 0x00	; 0
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	30 e0       	ldi	r19, 0x00	; 0
		    }			
			if(i==10){
				j++;
				i=0;
			}
			PORTC = 0x02;
  88:	68 94       	set
  8a:	dd 24       	eor	r13, r13
  8c:	d1 f8       	bld	r13, 1
			PORTD = ssd_val[j%10];
  8e:	0f 2e       	mov	r0, r31
  90:	fa e0       	ldi	r31, 0x0A	; 10
  92:	ef 2e       	mov	r14, r31
  94:	f1 2c       	mov	r15, r1
  96:	f0 2d       	mov	r31, r0
			_delay_ms(10);
			
			PORTC = 0x01;
  98:	41 e0       	ldi	r20, 0x01	; 1
	    DDRB = 0x00;
	    /* Replace with your application code */
	    int i = 0,j=0;
	    while (1)
	    {	
		    if((PINB & 0x04)==0x00){
  9a:	b2 99       	sbic	0x16, 2	; 22
  9c:	04 c0       	rjmp	.+8      	; 0xa6 <main+0x58>
			    while((PINB & 0x04)==0x00);		// infinite loop untill button is released
  9e:	b2 9b       	sbis	0x16, 2	; 22
  a0:	fe cf       	rjmp	.-4      	; 0x9e <main+0x50>
				i++;
  a2:	2f 5f       	subi	r18, 0xFF	; 255
  a4:	3f 4f       	sbci	r19, 0xFF	; 255
		    }			
			if(i==10){
  a6:	2a 30       	cpi	r18, 0x0A	; 10
  a8:	31 05       	cpc	r19, r1
  aa:	21 f4       	brne	.+8      	; 0xb4 <main+0x66>
				j++;
  ac:	0f 5f       	subi	r16, 0xFF	; 255
  ae:	1f 4f       	sbci	r17, 0xFF	; 255
				i=0;
  b0:	20 e0       	ldi	r18, 0x00	; 0
  b2:	30 e0       	ldi	r19, 0x00	; 0
			}
			PORTC = 0x02;
  b4:	d5 ba       	out	0x15, r13	; 21
			PORTD = ssd_val[j%10];
  b6:	c8 01       	movw	r24, r16
  b8:	b7 01       	movw	r22, r14
  ba:	1e d0       	rcall	.+60     	; 0xf8 <__divmodhi4>
  bc:	e1 e0       	ldi	r30, 0x01	; 1
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	ec 0f       	add	r30, r28
  c2:	fd 1f       	adc	r31, r29
  c4:	e8 0f       	add	r30, r24
  c6:	f9 1f       	adc	r31, r25
  c8:	80 81       	ld	r24, Z
  ca:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	83 ec       	ldi	r24, 0xC3	; 195
  ce:	99 e0       	ldi	r25, 0x09	; 9
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x82>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x88>
  d6:	00 00       	nop
			_delay_ms(10);
			
			PORTC = 0x01;
  d8:	45 bb       	out	0x15, r20	; 21
			PORTD = ssd_val[i];
  da:	e1 e0       	ldi	r30, 0x01	; 1
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	ec 0f       	add	r30, r28
  e0:	fd 1f       	adc	r31, r29
  e2:	e2 0f       	add	r30, r18
  e4:	f3 1f       	adc	r31, r19
  e6:	80 81       	ld	r24, Z
  e8:	82 bb       	out	0x12, r24	; 18
  ea:	81 ee       	ldi	r24, 0xE1	; 225
  ec:	94 e0       	ldi	r25, 0x04	; 4
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0xa0>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0xa6>
  f4:	00 00       	nop
  f6:	d1 cf       	rjmp	.-94     	; 0x9a <main+0x4c>

000000f8 <__divmodhi4>:
  f8:	97 fb       	bst	r25, 7
  fa:	07 2e       	mov	r0, r23
  fc:	16 f4       	brtc	.+4      	; 0x102 <__divmodhi4+0xa>
  fe:	00 94       	com	r0
 100:	06 d0       	rcall	.+12     	; 0x10e <__divmodhi4_neg1>
 102:	77 fd       	sbrc	r23, 7
 104:	08 d0       	rcall	.+16     	; 0x116 <__divmodhi4_neg2>
 106:	0b d0       	rcall	.+22     	; 0x11e <__udivmodhi4>
 108:	07 fc       	sbrc	r0, 7
 10a:	05 d0       	rcall	.+10     	; 0x116 <__divmodhi4_neg2>
 10c:	3e f4       	brtc	.+14     	; 0x11c <__divmodhi4_exit>

0000010e <__divmodhi4_neg1>:
 10e:	90 95       	com	r25
 110:	81 95       	neg	r24
 112:	9f 4f       	sbci	r25, 0xFF	; 255
 114:	08 95       	ret

00000116 <__divmodhi4_neg2>:
 116:	70 95       	com	r23
 118:	61 95       	neg	r22
 11a:	7f 4f       	sbci	r23, 0xFF	; 255

0000011c <__divmodhi4_exit>:
 11c:	08 95       	ret

0000011e <__udivmodhi4>:
 11e:	aa 1b       	sub	r26, r26
 120:	bb 1b       	sub	r27, r27
 122:	51 e1       	ldi	r21, 0x11	; 17
 124:	07 c0       	rjmp	.+14     	; 0x134 <__udivmodhi4_ep>

00000126 <__udivmodhi4_loop>:
 126:	aa 1f       	adc	r26, r26
 128:	bb 1f       	adc	r27, r27
 12a:	a6 17       	cp	r26, r22
 12c:	b7 07       	cpc	r27, r23
 12e:	10 f0       	brcs	.+4      	; 0x134 <__udivmodhi4_ep>
 130:	a6 1b       	sub	r26, r22
 132:	b7 0b       	sbc	r27, r23

00000134 <__udivmodhi4_ep>:
 134:	88 1f       	adc	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	5a 95       	dec	r21
 13a:	a9 f7       	brne	.-22     	; 0x126 <__udivmodhi4_loop>
 13c:	80 95       	com	r24
 13e:	90 95       	com	r25
 140:	bc 01       	movw	r22, r24
 142:	cd 01       	movw	r24, r26
 144:	08 95       	ret

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
