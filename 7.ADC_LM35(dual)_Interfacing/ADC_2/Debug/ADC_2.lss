
ADC_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000216  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000216  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000084b  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005db  00000000  00000000  00000b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000419  00000000  00000000  00001176  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001590  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000334  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000025f  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001baf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e1       	ldi	r30, 0x16	; 22
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 37       	cpi	r26, 0x72	; 114
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	93 d0       	rcall	.+294    	; 0x170 <main>
  4a:	e3 c0       	rjmp	.+454    	; 0x212 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <LCD_cmnd>:
#include <util/delay.h>
#define RS PC0
#define E PC1

void LCD_cmnd(unsigned char cmnd){
	PORTD &= 0x0F;
  4e:	92 b3       	in	r25, 0x12	; 18
  50:	9f 70       	andi	r25, 0x0F	; 15
  52:	92 bb       	out	0x12, r25	; 18
	PORTD |= (cmnd & 0xF0);
  54:	92 b3       	in	r25, 0x12	; 18
  56:	28 2f       	mov	r18, r24
  58:	20 7f       	andi	r18, 0xF0	; 240
  5a:	92 2b       	or	r25, r18
  5c:	92 bb       	out	0x12, r25	; 18
	PORTC &= (~(1<<RS));
  5e:	a8 98       	cbi	0x15, 0	; 21
	PORTC |= (1<<E);
  60:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  62:	e3 ec       	ldi	r30, 0xC3	; 195
  64:	f9 e0       	ldi	r31, 0x09	; 9
  66:	31 97       	sbiw	r30, 0x01	; 1
  68:	f1 f7       	brne	.-4      	; 0x66 <LCD_cmnd+0x18>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <LCD_cmnd+0x1e>
  6c:	00 00       	nop
	_delay_ms(10);
	PORTC &= (~(1<<E));
  6e:	a9 98       	cbi	0x15, 1	; 21
	
	PORTD &= 0x0F;
  70:	92 b3       	in	r25, 0x12	; 18
  72:	9f 70       	andi	r25, 0x0F	; 15
  74:	92 bb       	out	0x12, r25	; 18
	PORTD |= (cmnd<<4);
  76:	22 b3       	in	r18, 0x12	; 18
  78:	f0 e1       	ldi	r31, 0x10	; 16
  7a:	8f 9f       	mul	r24, r31
  7c:	c0 01       	movw	r24, r0
  7e:	11 24       	eor	r1, r1
  80:	82 2b       	or	r24, r18
  82:	82 bb       	out	0x12, r24	; 18
	PORTC |= (1<<E);
  84:	a9 9a       	sbi	0x15, 1	; 21
  86:	83 ec       	ldi	r24, 0xC3	; 195
  88:	99 e0       	ldi	r25, 0x09	; 9
  8a:	01 97       	sbiw	r24, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <LCD_cmnd+0x3c>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <LCD_cmnd+0x42>
  90:	00 00       	nop
	_delay_ms(10);
	PORTC &= (~(1<<E));
  92:	a9 98       	cbi	0x15, 1	; 21
  94:	08 95       	ret

00000096 <LCD_data>:
}

void LCD_data(unsigned char data){
	PORTD &= 0x0F;
  96:	92 b3       	in	r25, 0x12	; 18
  98:	9f 70       	andi	r25, 0x0F	; 15
  9a:	92 bb       	out	0x12, r25	; 18
	PORTD |= (data & 0xF0);
  9c:	92 b3       	in	r25, 0x12	; 18
  9e:	28 2f       	mov	r18, r24
  a0:	20 7f       	andi	r18, 0xF0	; 240
  a2:	92 2b       	or	r25, r18
  a4:	92 bb       	out	0x12, r25	; 18
	PORTC |= (1<<RS);
  a6:	a8 9a       	sbi	0x15, 0	; 21
	PORTC |= (1<<E);
  a8:	a9 9a       	sbi	0x15, 1	; 21
  aa:	e3 ec       	ldi	r30, 0xC3	; 195
  ac:	f9 e0       	ldi	r31, 0x09	; 9
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <LCD_data+0x18>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <LCD_data+0x1e>
  b4:	00 00       	nop
	_delay_ms(10);
	PORTC &= (~(1<<E));
  b6:	a9 98       	cbi	0x15, 1	; 21
	
	PORTD &= 0x0F;
  b8:	92 b3       	in	r25, 0x12	; 18
  ba:	9f 70       	andi	r25, 0x0F	; 15
  bc:	92 bb       	out	0x12, r25	; 18
	PORTD |= (data<<4);
  be:	22 b3       	in	r18, 0x12	; 18
  c0:	f0 e1       	ldi	r31, 0x10	; 16
  c2:	8f 9f       	mul	r24, r31
  c4:	c0 01       	movw	r24, r0
  c6:	11 24       	eor	r1, r1
  c8:	82 2b       	or	r24, r18
  ca:	82 bb       	out	0x12, r24	; 18
	PORTC |= (1<<E);
  cc:	a9 9a       	sbi	0x15, 1	; 21
  ce:	83 ec       	ldi	r24, 0xC3	; 195
  d0:	99 e0       	ldi	r25, 0x09	; 9
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCD_data+0x3c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCD_data+0x42>
  d8:	00 00       	nop
	_delay_ms(10);
	PORTC &= (~(1<<E));
  da:	a9 98       	cbi	0x15, 1	; 21
  dc:	08 95       	ret

000000de <LCD_init>:
}

void LCD_init(){
	LCD_cmnd(0x32);
  de:	82 e3       	ldi	r24, 0x32	; 50
  e0:	b6 df       	rcall	.-148    	; 0x4e <LCD_cmnd>
	LCD_cmnd(0x28);
  e2:	88 e2       	ldi	r24, 0x28	; 40
  e4:	b4 df       	rcall	.-152    	; 0x4e <LCD_cmnd>
	LCD_cmnd(0x06);
  e6:	86 e0       	ldi	r24, 0x06	; 6
  e8:	b2 df       	rcall	.-156    	; 0x4e <LCD_cmnd>
	LCD_cmnd(0x0C);
  ea:	8c e0       	ldi	r24, 0x0C	; 12
  ec:	b0 df       	rcall	.-160    	; 0x4e <LCD_cmnd>
	LCD_cmnd(0x01);
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	ae df       	rcall	.-164    	; 0x4e <LCD_cmnd>
  f2:	08 95       	ret

000000f4 <LCD_string>:
}
void LCD_string(unsigned char *str){
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	ec 01       	movw	r28, r24
	int i=0;
	while(str[i]!='\0'){
  fa:	88 81       	ld	r24, Y
  fc:	88 23       	and	r24, r24
  fe:	29 f0       	breq	.+10     	; 0x10a <LCD_string+0x16>
 100:	21 96       	adiw	r28, 0x01	; 1
		LCD_data(str[i]);
 102:	c9 df       	rcall	.-110    	; 0x96 <LCD_data>
	LCD_cmnd(0x0C);
	LCD_cmnd(0x01);
}
void LCD_string(unsigned char *str){
	int i=0;
	while(str[i]!='\0'){
 104:	89 91       	ld	r24, Y+
 106:	81 11       	cpse	r24, r1
 108:	fc cf       	rjmp	.-8      	; 0x102 <LCD_string+0xe>
		LCD_data(str[i]);
		i++;
	}
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <LCD_display>:

void LCD_display(int num){
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
	num=num>>1;
 114:	ec 01       	movw	r28, r24
 116:	d5 95       	asr	r29
 118:	c7 95       	ror	r28
	if (num>137)
 11a:	ca 38       	cpi	r28, 0x8A	; 138
 11c:	d1 05       	cpc	r29, r1
 11e:	14 f0       	brlt	.+4      	; 0x124 <LCD_display+0x14>
		num-=4;
 120:	24 97       	sbiw	r28, 0x04	; 4
 122:	0e c0       	rjmp	.+28     	; 0x140 <LCD_display+0x30>
	else if(num>100)
 124:	c5 36       	cpi	r28, 0x65	; 101
 126:	d1 05       	cpc	r29, r1
 128:	14 f0       	brlt	.+4      	; 0x12e <LCD_display+0x1e>
		num-=3;
 12a:	23 97       	sbiw	r28, 0x03	; 3
 12c:	09 c0       	rjmp	.+18     	; 0x140 <LCD_display+0x30>
	else if(num>61)
 12e:	ce 33       	cpi	r28, 0x3E	; 62
 130:	d1 05       	cpc	r29, r1
 132:	14 f0       	brlt	.+4      	; 0x138 <LCD_display+0x28>
		num-=2;
 134:	22 97       	sbiw	r28, 0x02	; 2
 136:	04 c0       	rjmp	.+8      	; 0x140 <LCD_display+0x30>
	else if(num>24)
 138:	c9 31       	cpi	r28, 0x19	; 25
 13a:	d1 05       	cpc	r29, r1
 13c:	0c f0       	brlt	.+2      	; 0x140 <LCD_display+0x30>
		num-=1;
 13e:	21 97       	sbiw	r28, 0x01	; 1
		
	LCD_data(0x30+num/100);
 140:	ce 01       	movw	r24, r28
 142:	64 e6       	ldi	r22, 0x64	; 100
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	3e d0       	rcall	.+124    	; 0x1c4 <__divmodhi4>
 148:	80 e3       	ldi	r24, 0x30	; 48
 14a:	86 0f       	add	r24, r22
 14c:	a4 df       	rcall	.-184    	; 0x96 <LCD_data>
	LCD_data(0x30+((num/10)%10));
 14e:	2a e0       	ldi	r18, 0x0A	; 10
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	ce 01       	movw	r24, r28
 154:	b9 01       	movw	r22, r18
 156:	36 d0       	rcall	.+108    	; 0x1c4 <__divmodhi4>
 158:	c8 2f       	mov	r28, r24
 15a:	cb 01       	movw	r24, r22
 15c:	b9 01       	movw	r22, r18
 15e:	32 d0       	rcall	.+100    	; 0x1c4 <__divmodhi4>
 160:	80 5d       	subi	r24, 0xD0	; 208
 162:	99 df       	rcall	.-206    	; 0x96 <LCD_data>
	LCD_data(0x30+num%10);
 164:	80 e3       	ldi	r24, 0x30	; 48
 166:	8c 0f       	add	r24, r28
 168:	96 df       	rcall	.-212    	; 0x96 <LCD_data>
	
	
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <main>:

int main(void)
{
	DDRD = 0xFF;
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x03;
 174:	83 e0       	ldi	r24, 0x03	; 3
 176:	84 bb       	out	0x14, r24	; 20
	LCD_init();
 178:	b2 df       	rcall	.-156    	; 0xde <LCD_init>
	int a;
	while(1)
	{
		ADMUX = 0x42;
 17a:	0f 2e       	mov	r0, r31
 17c:	f2 e4       	ldi	r31, 0x42	; 66
 17e:	ff 2e       	mov	r15, r31
 180:	f0 2d       	mov	r31, r0
		ADCSRA = 0xA3;
 182:	c3 ea       	ldi	r28, 0xA3	; 163
		
		LCD_cmnd(0x80);
		LCD_string("TEMP1 : ");
		LCD_display(a);
		
		ADMUX = 0x43;
 184:	d3 e4       	ldi	r29, 0x43	; 67
	DDRC = 0x03;
	LCD_init();
	int a;
	while(1)
	{
		ADMUX = 0x42;
 186:	f7 b8       	out	0x07, r15	; 7
		ADCSRA = 0xA3;
 188:	c6 b9       	out	0x06, r28	; 6
		ADCSRA |= (1<<ADSC);
 18a:	36 9a       	sbi	0x06, 6	; 6
		while((ADCSRA & (1<<ADIF)) != (1<<ADIF));
 18c:	34 9b       	sbis	0x06, 4	; 6
 18e:	fe cf       	rjmp	.-4      	; 0x18c <main+0x1c>
		ADCSRA |= (1<<ADIF);
 190:	34 9a       	sbi	0x06, 4	; 6
		a=ADC;
 192:	04 b1       	in	r16, 0x04	; 4
 194:	15 b1       	in	r17, 0x05	; 5
		
		LCD_cmnd(0x80);
 196:	80 e8       	ldi	r24, 0x80	; 128
 198:	5a df       	rcall	.-332    	; 0x4e <LCD_cmnd>
		LCD_string("TEMP1 : ");
 19a:	80 e6       	ldi	r24, 0x60	; 96
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	aa df       	rcall	.-172    	; 0xf4 <LCD_string>
		LCD_display(a);
 1a0:	c8 01       	movw	r24, r16
 1a2:	b6 df       	rcall	.-148    	; 0x110 <LCD_display>
		
		ADMUX = 0x43;
 1a4:	d7 b9       	out	0x07, r29	; 7
		ADCSRA = 0xA3;
 1a6:	c6 b9       	out	0x06, r28	; 6
		ADCSRA |= (1<<ADSC);
 1a8:	36 9a       	sbi	0x06, 6	; 6
		while((ADCSRA & (1<<ADIF)) != (1<<ADIF));
 1aa:	34 9b       	sbis	0x06, 4	; 6
 1ac:	fe cf       	rjmp	.-4      	; 0x1aa <main+0x3a>
		ADCSRA |= (1<<ADIF);
 1ae:	34 9a       	sbi	0x06, 4	; 6
		a=ADC;
 1b0:	04 b1       	in	r16, 0x04	; 4
 1b2:	15 b1       	in	r17, 0x05	; 5
		LCD_cmnd(0xC0);
 1b4:	80 ec       	ldi	r24, 0xC0	; 192
 1b6:	4b df       	rcall	.-362    	; 0x4e <LCD_cmnd>
		LCD_string("TEMP2 : ");
 1b8:	89 e6       	ldi	r24, 0x69	; 105
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	9b df       	rcall	.-202    	; 0xf4 <LCD_string>
		LCD_display(a);
 1be:	c8 01       	movw	r24, r16
 1c0:	a7 df       	rcall	.-178    	; 0x110 <LCD_display>
	}
 1c2:	e1 cf       	rjmp	.-62     	; 0x186 <main+0x16>

000001c4 <__divmodhi4>:
 1c4:	97 fb       	bst	r25, 7
 1c6:	07 2e       	mov	r0, r23
 1c8:	16 f4       	brtc	.+4      	; 0x1ce <__divmodhi4+0xa>
 1ca:	00 94       	com	r0
 1cc:	06 d0       	rcall	.+12     	; 0x1da <__divmodhi4_neg1>
 1ce:	77 fd       	sbrc	r23, 7
 1d0:	08 d0       	rcall	.+16     	; 0x1e2 <__divmodhi4_neg2>
 1d2:	0b d0       	rcall	.+22     	; 0x1ea <__udivmodhi4>
 1d4:	07 fc       	sbrc	r0, 7
 1d6:	05 d0       	rcall	.+10     	; 0x1e2 <__divmodhi4_neg2>
 1d8:	3e f4       	brtc	.+14     	; 0x1e8 <__divmodhi4_exit>

000001da <__divmodhi4_neg1>:
 1da:	90 95       	com	r25
 1dc:	81 95       	neg	r24
 1de:	9f 4f       	sbci	r25, 0xFF	; 255
 1e0:	08 95       	ret

000001e2 <__divmodhi4_neg2>:
 1e2:	70 95       	com	r23
 1e4:	61 95       	neg	r22
 1e6:	7f 4f       	sbci	r23, 0xFF	; 255

000001e8 <__divmodhi4_exit>:
 1e8:	08 95       	ret

000001ea <__udivmodhi4>:
 1ea:	aa 1b       	sub	r26, r26
 1ec:	bb 1b       	sub	r27, r27
 1ee:	51 e1       	ldi	r21, 0x11	; 17
 1f0:	07 c0       	rjmp	.+14     	; 0x200 <__udivmodhi4_ep>

000001f2 <__udivmodhi4_loop>:
 1f2:	aa 1f       	adc	r26, r26
 1f4:	bb 1f       	adc	r27, r27
 1f6:	a6 17       	cp	r26, r22
 1f8:	b7 07       	cpc	r27, r23
 1fa:	10 f0       	brcs	.+4      	; 0x200 <__udivmodhi4_ep>
 1fc:	a6 1b       	sub	r26, r22
 1fe:	b7 0b       	sbc	r27, r23

00000200 <__udivmodhi4_ep>:
 200:	88 1f       	adc	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	5a 95       	dec	r21
 206:	a9 f7       	brne	.-22     	; 0x1f2 <__udivmodhi4_loop>
 208:	80 95       	com	r24
 20a:	90 95       	com	r25
 20c:	bc 01       	movw	r22, r24
 20e:	cd 01       	movw	r24, r26
 210:	08 95       	ret

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
