
Int1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000618  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000533  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b0  00000000  00000000  00000d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000005c  00000000  00000000  00000fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000309  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019c  00000000  00000000  00001325  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	3f c0       	rjmp	.+126    	; 0x82 <__vector_1>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	50 c0       	rjmp	.+160    	; 0xd6 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

int main(void)
{	DDRD = 1<<PD2;		// Set PD2 as input (Using for interrupt INT0)
  38:	84 e0       	ldi	r24, 0x04	; 4
  3a:	81 bb       	out	0x11, r24	; 17
	PORTD = 1<<PD2;		// Enable PD2 pull-up resistor
  3c:	82 bb       	out	0x12, r24	; 18
	DDRB = 0xFF;
  3e:	8f ef       	ldi	r24, 0xFF	; 255
  40:	87 bb       	out	0x17, r24	; 23
	MCUCR = 0x03;
  42:	83 e0       	ldi	r24, 0x03	; 3
  44:	85 bf       	out	0x35, r24	; 53
	GICR = (1<<INT0);
  46:	80 e4       	ldi	r24, 0x40	; 64
  48:	8b bf       	out	0x3b, r24	; 59
	GIFR = (1<<INT0);
  4a:	8a bf       	out	0x3a, r24	; 58
	sei();
  4c:	78 94       	sei
    while (1) 
    {
		
		int i;
		for(i=0;i<8;i++){
			PORTB = 1 << i;
  4e:	41 e0       	ldi	r20, 0x01	; 1
  50:	50 e0       	ldi	r21, 0x00	; 0
    /* Replace with your application code */
    while (1) 
    {
		
		int i;
		for(i=0;i<8;i++){
  52:	80 e0       	ldi	r24, 0x00	; 0
  54:	90 e0       	ldi	r25, 0x00	; 0
			PORTB = 1 << i;
  56:	9a 01       	movw	r18, r20
  58:	08 2e       	mov	r0, r24
  5a:	02 c0       	rjmp	.+4      	; 0x60 <__SREG__+0x21>
  5c:	22 0f       	add	r18, r18
  5e:	33 1f       	adc	r19, r19
  60:	0a 94       	dec	r0
  62:	e2 f7       	brpl	.-8      	; 0x5c <__SREG__+0x1d>
  64:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  66:	2f e9       	ldi	r18, 0x9F	; 159
  68:	36 e8       	ldi	r19, 0x86	; 134
  6a:	61 e0       	ldi	r22, 0x01	; 1
  6c:	21 50       	subi	r18, 0x01	; 1
  6e:	30 40       	sbci	r19, 0x00	; 0
  70:	60 40       	sbci	r22, 0x00	; 0
  72:	e1 f7       	brne	.-8      	; 0x6c <__SREG__+0x2d>
  74:	00 c0       	rjmp	.+0      	; 0x76 <__SREG__+0x37>
  76:	00 00       	nop
    /* Replace with your application code */
    while (1) 
    {
		
		int i;
		for(i=0;i<8;i++){
  78:	01 96       	adiw	r24, 0x01	; 1
  7a:	88 30       	cpi	r24, 0x08	; 8
  7c:	91 05       	cpc	r25, r1
  7e:	59 f7       	brne	.-42     	; 0x56 <__SREG__+0x17>
  80:	e8 cf       	rjmp	.-48     	; 0x52 <__SREG__+0x13>

00000082 <__vector_1>:
			_delay_ms(500);
		}
    }
}

ISR(INT0_vect){
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	2f 93       	push	r18
  8e:	3f 93       	push	r19
  90:	4f 93       	push	r20
  92:	5f 93       	push	r21
  94:	8f 93       	push	r24
  96:	9f 93       	push	r25
	int i,tmp;
	tmp=PORTB;
  98:	98 b3       	in	r25, 0x18	; 24
	PORTB = 0x00;
  9a:	18 ba       	out	0x18, r1	; 24
  9c:	2a e0       	ldi	r18, 0x0A	; 10
  9e:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0;i<10;i++){
		PORTB ^= 0xFF;
  a0:	88 b3       	in	r24, 0x18	; 24
  a2:	80 95       	com	r24
  a4:	88 bb       	out	0x18, r24	; 24
  a6:	4f e9       	ldi	r20, 0x9F	; 159
  a8:	56 e8       	ldi	r21, 0x86	; 134
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	41 50       	subi	r20, 0x01	; 1
  ae:	50 40       	sbci	r21, 0x00	; 0
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <__vector_1+0x2a>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <__vector_1+0x34>
  b6:	00 00       	nop
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	31 09       	sbc	r19, r1

ISR(INT0_vect){
	int i,tmp;
	tmp=PORTB;
	PORTB = 0x00;
	for(i=0;i<10;i++){
  bc:	89 f7       	brne	.-30     	; 0xa0 <__vector_1+0x1e>
		PORTB ^= 0xFF;
		_delay_ms(500);
		//PORTB = 0x00;
		//_delay_ms(500);
	}
	PORTB = tmp;
  be:	98 bb       	out	0x18, r25	; 24
  c0:	9f 91       	pop	r25
  c2:	8f 91       	pop	r24
  c4:	5f 91       	pop	r21
  c6:	4f 91       	pop	r20
  c8:	3f 91       	pop	r19
  ca:	2f 91       	pop	r18
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
